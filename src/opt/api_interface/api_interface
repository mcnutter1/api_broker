#!/usr/bin/perl -w
use IO::Socket::INET;
use IO::Select();
use XML::Simple;
use JSON;
use Data::Dumper;
use XML::Parser;
use Storable;
use Digest::SHA1  qw(sha1 sha1_hex sha1_base64);
use Time::HiRes qw(time);
use POSIX;
use Getopt::Std;
use HTTP::Request;
use HTTP::Response;
use UUID::Tiny ':std';

my $VERSION = "1.2";


my %OPTIONS=();
getopts("c:m:z:", \%OPTIONS);

my $MODE = $OPTIONS{m};
my $PARAMS = $OPTIONS{z}; 
my $API_KEY_DB = "/opt/api_interface/api_key.db";
my $CONFIGURATION_FILE = $OPTIONS{c};;
my %CONFIG;
my %PLUGINS;
my %PLUGIN_INITIATORS;

my $CONTROLLERS_CB = {
			"/status" => "status_controller_cb",
			"/request" => "request_controller_cb",
			"/config" => "config_controller_cb"

			};



my %API_KEYS = ( );

# auto-flush on socket
$| = 1;

sub read_configuration {

	my $json_text = do {
   		open(my $json_fh, "<:encoding(UTF-8)", $CONFIGURATION_FILE) or die("Can't open \$filename\": $!\n");
   		local $/;
   		<$json_fh>
	};

	my $json = JSON->new;
	my $data = $json->decode($json_text);
	%CONFIG = %{$data->{configuration}};
}


sub activate_plugin {

	my $params = shift;

	$PLUGINS{$params->{name}}{status} = "active";
	$PLUGINS{$params->{name}}{initiator} = $params->{initiator};
	$PLUGINS{$params->{name}}{call_back} = $params->{call_back};

	$PLUGIN_INITIATORS{$params->{initiator}} = $params->{name};

	log_entry({level=>"INFO", message=>"Activated plugin [$params->{name}] which provides the following initiator [$params->{initiator}]"}); 
}

sub load_plugins {
	log_entry({message=>"Loading Plugins",level=>"INFO"});
	if (-d "/opt/api_interface/plugins") {
	 	opendir my $dir, "/opt/api_interface/plugins/";
        	my @found_plugins = readdir $dir;
        	closedir $dir;

	        foreach my $found_plugin (@found_plugins) {

        	        $qualified_lib = "/opt/api_interface/plugins/$found_plugin";

                	if (-f "/opt/api_interface/plugins/$found_plugin") {
                        	log_entry({message=>"Loading Plugin from file [$found_plugin]",level=>"INFO"});
                        	require $qualified_lib;
                	}
        	}
	}
}

sub log_entry {

	my $params = shift;
	my $message = $params->{message};
	my $level = $params->{level};

	open(my $fh, '>>', $CONFIG{log_file}) or die "Could not open file '$CONFIG{log_file}' $!";
	print $fh "\n" .localtime() . " - [$level] - " . $message;
	close $fh; 

}


sub read_json_file {

	my $json_file = shift;
        my $json_text = do {
                open(my $json_fh, "<:encoding(UTF-8)", $json_file) or die("Can't open " . $json_file . ": $!\n");
                local $/;
                <$json_fh>
        };

        my $json = JSON->new;
        my $data = $json->decode($json_text);
	return $data;
}


sub load_api_key_db {

	if (-e $API_KEY_DB) {
		$api_key_db_ref = retrieve($API_KEY_DB);
		%API_KEYS = %{$api_key_db_ref};
		
	} else {
		print "API Key DB not found\n";
		exit(1);
	}
}

sub add_api_key_to_db {
	
	print "Generating API Key\n";
	$api_key = sha1_base64($PARAMS);
	print "API Key: $api_key\n\n";

	$API_KEYS{$api_key} = $PARAMS;
	store \%API_KEYS, $API_KEY_DB;
}

sub handle_packet {

	my %headers;
	my $socket = new IO::Socket::INET (
    	LocalHost => '0.0.0.0',
    	LocalPort => $CONFIG{port},
    	Proto => 'tcp',
    	Listen => 5,
    	Reuse => 1
	);
	die "cannot create socket $!\n" unless $socket;
	log_entry({level=>"INFO",message=>"Server started, listening on port $CONFIG{port}"});
	while(1) {
		my %response;
    		# waiting for a new client connection
    		my $client_socket = $socket->accept();
 		my $start_ms_time = time();
    		my $client_address = $client_socket->peerhost();
    		my $client_port = $client_socket->peerport();
		log_entry({level=>"INFO",message=>"[$client_address] client connected, source port: $client_port"});
 
    		my $data = "";
		my $xml = "";
		my $XML = "";
		my $JSON = "";
		my $CODE = "";
    		$client_socket->recv($data, 10024);
		
		my $http_request = my $request = HTTP::Request->parse($data);
		my $path = $http_request->uri();
		my $method = $http_request->method;
		my $content = $http_request->content;		
		my $headers = $http_request->headers;
	

		log_entry({level=>"INFO",message=>"[$client_address] client accessed $path"});
		print $method;



		if ($method eq "GET" || $method eq "POST") {

			log_entry({level=>"DEBUG",message=>"[$client_address] received $method request: $data"}) if ($PARAMS eq "debug");

			if ($CONTROLLERS_CB->{$path}) { 
			
				log_entry({level=>"DEBUG",message=>"[$client_address] matched controller for $path"}) if ($PARAMS eq "debug"); 

				my $payload_hash = parse_payload({payload=>$content,client_address=>$client_address,content_type=>$headers->{'content-type'}}); 
				my $controller = $CONTROLLERS_CB->{$path}->({client_address=>$client_address, method=>$method, body=>$content, content_type=>$headers->{'content-type'}}) if $CONTROLLERS_CB->{$path};
			
				if ($controller->{success}) {

					$CODE = "200";
					$response{"response"} = $controller->{response};
					my $complete_ms_time = time();
                	        	my $time_elapsed = $complete_ms_time - $start_ms_time;
                        		$response{"elapsed_time"} = "$time_elapsed s";

				} else {
					 $CODE = $controller->{'error_code'} || "500";
					 $response{'error'} = $controller->{error} || "Controller did not return success";					 
				}

			} else {
				$CODE = "404";
				$response{'error'} = "Unknown controller";
				log_entry({level=>"DEBUG",message=>"[$client_address] accessed unknown controller"});
			}

			my $complete_ms_time = time();
                        my $time_elapsed = $complete_ms_time - $start_ms_time;
                        $response{"elapsed_time"} = "$time_elapsed s";

			my $xs  = XML::Simple->new(ForceArray => 1, KeepRoot => 0, XMLDecl => 1,RootName => "response");
                        $xml = $xs->XMLout(\%response);
                        $JSON = encode_json \%response;
			log_entry({level=>"DEBUG",message=>"[$client_address] sent response: \n$xml"}) if ($PARAMS eq "debug");
                        $data = $data . $xml;
		
		} elsif ($method eq "OPTIONS") {
			$CODE = "200";
			
						
		} else {
			log_entry({level=>"CLIENT_ERROR",message=>"[$client_address] used unsupported method"});
			$response{error} = "unsupported method";
			$CODE = "500";
			my $complete_ms_time = time();
                        my $time_elapsed = $complete_ms_time - $start_ms_time;
                        $response{"elapsed_time"} = "$time_elapsed s";
                        my $xs  = XML::Simple->new(ForceArray => 1, KeepRoot => 0, XMLDecl => 1,RootName => "response");
                        $xml = $xs->XMLout(\%response);
                        $data = $data . $xml;
		}
	

	my $return_content;
	if (content_type=>$headers->{'accept'}  =~ m/json/) {

		$return_content = $JSON;
	} else {
		$return_content = $xml
	}
	
	$response_message = form_http_response({content=>"$return_content",code=>$CODE, content_type=>$headers->{'accept'}});
	log_entry({level=>"DEBUG",message=>"[$client_address] sent response: \n$response_message"}) if ($PARAMS eq "debug");
    	# write response data to the connected client
    	$client_socket->send($response_message);
 
    	# notify client that response has been sent
    	shutdown($client_socket, 1);
	%response = ();
	}
 	
	$socket->close();

}


sub parse_payload {


	my $params = shift;

	my $payload = $params->{payload};
	my $content_type = $params->{content_type};
	my $client_address =$params->{client_address};
	
	if ($content_type eq "application/xml") {		
		log_entry({level=>"DEBUG",message=>"[$client_address] parsing payload $payload as XML"}) if ($PARAMS eq "debug");	
	} elsif ($content_type eq "application/json") {
		log_entry({level=>"DEBUG",message=>"[$client_address] parsing payload $payload as JSON"}) if ($PARAMS eq "debug");
	} else {
		log_entry({level=>"DEBUG",message=>"[$client_address] parsing payload $payload as XML because no content-type was specifiied in request"}) if ($PARAMS eq "debug");

	}
}


sub form_http_response {
	my $params = shift;
	my $respbody = $params->{content};
	my $code = $params->{code};
	my $content_type = $params->{content_type};
	
	$response = HTTP::Response->new('200',"HTTP/1.0 OK");
	#$response = HTTP::Response->new($code,'Ok');
	$response->header('Access-Control-Allow-Origin' => '*');
	#$response->header('Access-Control-Allow-Methods' => 'GET, POST, OPTIONS');
	#$response->header('Access-Control-Allow-Headers' => 'X-Requested-With');
#	$response->header( 'Content-type' => $content_type || "application/xml");
	#$response->header( 'Cache-control' => 'no-cache, must-revalidate' );	
	$response->header( 'Content-length' => length($respbody) );
	$response->header( 'Content-type' => $content_type || "application/xml");
	$response->header( 'Server' => "McNutter API Command Runner/$VERSION");
	$response->header( 'Connection' => "keep-alive");
	$response->header( 'Date' => "Tue, 04 Jul 2017 03:51:21 GMT");
	$response->header( 'Last-Modified' => "Tue, 04 Jul 2017 03:07:21 GMT");
	$response->content($respbody);

	return $response->as_string;

}
sub status_controller_cb {
	$params = shift;
	$client_address = $params->{client_address};
	log_entry({level=>"DEBUG",message=>"[$client_address] entered status controller callback function"});
	
	my $response;

	if ($params->{method} eq "GET") {
		$response->{success} = "true";
		$response->{response}->{status} = "Service OK";
		$uuid = get_uuid({type=>"hostid_mac"});
		$response->{response}->{uuid} = $uuid;
	} else {
		$response->{error} = "Bad method";
	}
	return $response;
}


sub request_controller_cb {
        $params = shift;
        $client_address = $params->{client_address};
        log_entry({level=>"DEBUG",message=>"[$client_address] entered request controller callback function"});

	my $response;
	if ($params->{body} && $params->{method} eq "POST") {
				
				
				my $hashref;
				my $json = JSON->new;
                                $hashref = XMLin($params->{body}) if ($params->{content_type} =~ m/xml/);
				$hashref = $json->decode($params->{body}) if ($params->{content_type} =~ m/json/);
			
				print Dumper($hashref);
                                my $request_api_key = $hashref->{authentication}->{apikey};
                                if ($API_KEYS{$request_api_key}) {

                                        log_entry({level=>"INFO",message=>"[$client_address] Authenticated by $API_KEYS{$request_api_key}"});
                                        foreach my $initiator (keys %{$hashref}) {

                                                if ($PLUGIN_INITIATORS{$initiator}) {

                                                        $response->{response}->{$initiator} = [$PLUGINS{$PLUGIN_INITIATORS{$initiator}}{call_back}->($hashref->{$initiator})];

                                                }
                                        }

					$response->{success} = "true";
                                } else {
                                        log_entry({level=>"CLIENT_WARNING",message=>"[$client_address] failed authentication using API KEY [$request_api_key]"});
                                        $response->{error} = "Invalid API key";
                                	$response->{error_code} = "403";
                                }
                        } else {
                                log_entry({level=>"CLIENT_ERROR",message=>"[$client_address] failed to send the right data"});
                                $response->{error} = "Invalid data sent";
                        }

        return $response;
}


sub config_controller_cb {
        $params = shift;
        $client_address = $params->{client_address};
        log_entry({level=>"DEBUG",message=>"[$client_address] entered config controller callback function"});

        my $response;
        if ($params->{body} && $params->{method} eq "POST") {
                                my $hashref = XMLin($params->{body});
                                my $request_api_key = $hashref->{authentication}->{apikey};
                                if ($API_KEYS{$request_api_key}) {

                                        log_entry({level=>"INFO",message=>"[$client_address] Authenticated by $API_KEYS{$request_api_key}"});

                                        foreach my $initiator (keys %{$hashref}) {


						if ($initiator eq "command" && $hashref->{$initiator}->{content} eq "show config") {
							$response->{response}{configuration} = \%CONFIG; 
						}

						if ($initiator eq "command" && $hashref->{$initiator}->{content} eq "show api keys") {
                                                        $response->{response}{configuration} = \%API_KEYS;
                                                }
					
						
                                        }

                                        $response->{success} = "true";
                                } else {
                                        log_entry({level=>"CLIENT_WARNING",message=>"[$client_address] failed authentication using API KEY [$request_api_key]"});
                                        $response->{error} = "Invalid API key";
                                        $response->{error_code} = "403";
                                }
                        } else {
                                log_entry({level=>"CLIENT_ERROR",message=>"[$client_address] failed to send the right data"});
                                $response->{error} = "Invalid data sent";
                        }

        return $response;
}




if ($MODE eq "add_api_key") {

	load_api_key_db();
	add_api_key_to_db($PARAMS);
	
}

if ($MODE eq "print_api_keys") {

        load_api_key_db();

	print Dumper(\%API_KEYS);
}

if ($MODE eq "init_db") {

	store \%API_KEYS, $API_KEY_DB;
	
}

if ($MODE eq "dump_config") {

	read_configuration();
	print Dumper(\%CONFIG);
}

if ($MODE eq "get_uuid") {
	$uuid = get_uuid({type=>"hostid_mac"});
	print "This machines UUID is: $uuid\n\n";
}

if ($MODE eq "daemon") {

	daemonize();
	read_configuration();
	print "Started McNutter API version $VERSION\n\nLogging output to $CONFIG{log_file}\n";	
	log_entry({level=>"INFO",message=>"Daemon Mode Started"});
	load_plugins();
	load_api_key_db();

	my $server = handle_packet();

	my $select = new IO::Select();
	$select->add($server);


}

if ($MODE eq "server") {

        read_configuration();
        print "Started McNutter API version $VERSION\n\nLogging output to $CONFIG{log_file}\n";
        log_entry({level=>"INFO",message=>"Daemon Mode Started"});
        load_plugins();
        load_api_key_db();

        my $server = handle_packet();

        my $select = new IO::Select();
        $select->add($server);


}






sub daemonize {
   use POSIX;
   POSIX::setsid or die "setsid: $!";
   my $pid = fork ();
	if ($pid > 0) {
		open F, ">/var/run/api_interface.pid"; 
        	print F $pid; 
        	close F; 
	}
   if ($pid < 0) {
      die "fork: $!";
   } elsif ($pid) {
      exit 0;
   }
   chdir "/";
   umask 0;
   foreach (0 .. (POSIX::sysconf (&POSIX::_SC_OPEN_MAX) || 1024))
      { POSIX::close $_ }
   open (STDIN, "</dev/null");
   open (STDOUT, ">>$CONFIG{log_file_stdout}");
   open (STDERR, ">>$CONFIG{log_file_stdout}");
 }




sub get_uuid {

	my $params = shift;

        my $CPU_ID=`dmidecode -t 4 | grep ID | sed 's/.*ID://;s/ //g'`;
        #my $Host_ID=`hostid`;

        my $Default_NIC=`route | grep '\^default' | grep -o '[^ ]*\$'`;
        chomp $Default_NIC;
        my $Default_NIC_MAC=`ifconfig | grep $Default_NIC | awk '{print \$NF}' | sed 's/://g'`;
        my $Host_ID=`cat /sys/class/dmi/id/product_uuid`;
        my $HostID_UUID     = create_uuid(UUID_V3, $Host_ID);
        my $HostIDNIC_UUID     = create_uuid(UUID_V3, "$Host_ID$Default_NIC_MAC");
        my $CPUID_UUID  = create_uuid(UUID_V3, $CPU_ID);

        if ($params->{type} eq "cpu") {
                return uuid_to_string($CPUID_UUID);

        } elsif ($params->{type} eq "hostid_mac") {
                return uuid_to_string("$HostIDNIC_UUID");
        } else {
                return uuid_to_string($HostID_UUID);
        }

}
